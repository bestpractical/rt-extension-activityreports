<& MiniPlot, data => \%counts &>

<table style="width: 100%">
<tr class="titlerow">
<th>Queue</th><th>Activity</th><th>Date</th><th>Time</th><th>Ticket #</th><th>Subject</th><th>User</th><th>Type</th><th>Short description</th>
</tr>
% for my $item (@items) {
<tr valign=top>
<td nowrap><% $item->{queue} %></td>
<td nowrap><% $item->{status} %></td>
<td nowrap><% $item->{date} %></td>
<td nowrap><% $item->{time} %></td>
<td nowrap><% $item->{id} %></td>
<td width="25%"><% $item->{subject} %></td>
<td><% $item->{actor} %></td>
<td><% $item->{type} %></td>
<td><% $item->{notes} %></td>
</tr>
% }
</table>

<%args>
$query => ''
$start => "2005/01/01"
$end   => "2006/01/01"
$actor => ''
</%args>
<%init>
use RT::Extension::ActivityReports qw( RelevantTxns );
my %counts;
my @items;

my $tickets = RT::Tickets->new($session{'CurrentUser'});
$tickets->FromSQL(join " AND ", map {"($_)"} grep {/\S/} ($query, "Updated >= '$start' AND Updated <= '$end'"));
while (my $ticket = $tickets->Next) {
    my $txns = RelevantTxns( $ticket, start => $start, end => $end, query => $query );
    while (my $txn = $txns->Next) {
	# We have to filter for actor here, not in the query.  Alas.
	if( $actor ) {
	    next unless $txn->CreatorObj->Name eq $actor;
	}

	# For the summary report
        my $date = substr($txn->Created, 0, 10);
        # we don't have data on the status of a new ticket, default to 'new'
        $counts{$date}{$txn->NewValue || 'new'}++;

        if (($date lt $start) or ($date gt $end)) { next; }

	# For the detail report
        push @items, { queue => $txn->TicketObj->QueueObj->Name,
                       id => $txn->TicketObj->id,
                       subject => $txn->TicketObj->Subject,
                       date => (split ' ', $txn->CreatedObj->ISO)[0],
                       time => (split ' ', $txn->CreatedObj->ISO)[1],
                       status => $txn->NewValue || '-',
                       actor => $txn->CreatorObj->Name,
                       type => $txn->Type,
                       notes => ($txn->Content ne 'This transaction appears to have no content' ? substr($txn->Content, 0, 100) :  $txn->BriefDescription)
                     };
    }
}

my $inactivetickets = RT::Tickets->new($session{'CurrentUser'});
$inactivetickets->FromSQL(join " AND ", map {"($_)"} grep {/\S/} ($query, "Status != 'resolved' AND Status != 'rejected'"));
while (my $inactiveticket = $inactivetickets->Next) {
    # Add items ONLY if not found in @items already
    if (! grep { $_->{id} == $inactiveticket->id  } @items) {
        my $user = RT::User->new($RT::SystemUser);
        $user->Load( $inactiveticket->LastUpdatedBy );
        push @items, { queue => $inactiveticket->QueueObj->Name,
                       id => $inactiveticket->id,
                       subject => $inactiveticket->Subject,
                       date => (split ' ', $inactiveticket->LastUpdated)[0],
                       time => (split ' ', $inactiveticket->LastUpdated)[1],
                       status => $inactiveticket->Status,
                       actor => $user->Name,
                       type => '-',
                       notes => '-- Opened, but no updates within range --'
        };
    }
}

@items = sort {
           $a->{'queue'}    cmp $b->{'queue'}
        || $a->{'id'}       <=> $b->{'id'}
        || $a->{'date'}     cmp $b->{'date'}
        || $a->{'time'}     cmp $b->{'time'}
} @items;

</%init>
